import crescent.plugin
import bot
from bot.lavalink_voice import LavalinkVoice

import random

import crescent
import hikari

plugin = crescent.Plugin[hikari.GatewayBot, bot.Model]()


@plugin.include
@bot.groups.music.child
@crescent.command(
    description="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É –Ω–∞ –ø–∞—É–∑—É"
)
async def pause(ctx: crescent.Context) -> None:
    """Pause the currently playing song"""
    if not ctx.guild_id:
        return None

    voice = plugin.app.voice.connections.get(ctx.guild_id)

    if not voice:
        await ctx.respond(bot.Embed(
            title="–Ø –Ω–µ –≤ –≤–æ–π—Å–µ!",
            color=bot.Colors.ERROR
        ))
        return None

    assert isinstance(voice, LavalinkVoice)

    player = await voice.player.get_player()

    if player.track:
        if player.track.info.uri:
            await ctx.respond(embed=bot.Embed(
                title="–ù–∞ –ø–∞—É–∑–µ!",
                description=f"[`{player.track.info.author} - {player.track.info.title}`](<{player.track.info.uri}>)",
                color=bot.Colors.SUCCESS
            ))
        else:
            await ctx.respond(embed=bot.Embed(
                title="–ù–∞ –ø–∞—É–∑–µ!",
                description=f"`{player.track.info.author} - {player.track.info.title}`",
                color=bot.Colors.SUCCESS
            ))

        await voice.player.set_pause(True)
    else:
        await ctx.respond(embed=bot.Embed(
            title="–ß—Ç–æ —Å—Ç–æ–ø–∞—Ç—å?",
            description="–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.",
            color=bot.Colors.ERROR
        ))


@plugin.include
@bot.groups.music.child
@crescent.command(
    description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–ø—Ä–æ—Å–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏"
)
async def resume(ctx: crescent.Context) -> None:
    """Resume the currently playing song"""
    if not ctx.guild_id:
        return None

    voice = plugin.app.voice.connections.get(ctx.guild_id)

    if not voice:
        await ctx.respond(bot.Embed(
            title="–Ø –Ω–µ –≤ –≤–æ–π—Å–µ!",
            color=bot.Colors.ERROR
        ))
        return None

    assert isinstance(voice, LavalinkVoice)

    player = await voice.player.get_player()

    if player.track:
        if player.track.info.uri:
            await ctx.respond(embed=bot.Embed(
                title="–í–∫–ª—é—á–∏–ª–∞!",
                description=f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: [`{player.track.info.author} - {player.track.info.title}`](<{player.track.info.uri}>)",
                color=bot.Colors.SUCCESS
            ))
        else:
            await ctx.respond(embed=bot.Embed(
                title="–í–∫–ª—é—á–∏–ª–∞!",
                description=f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: `{player.track.info.author} - {player.track.info.title}`",
                color=bot.Colors.SUCCESS
            ))

        await voice.player.set_pause(False)
    else:
        await ctx.respond(embed=bot.Embed(
            title="–ß—Ç–æ –≤–∫–ª—é—á–∞—Ç—å-—Ç–æ?",
            description="–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç",
            color=bot.Colors.ERROR
        ))


@plugin.include
@bot.groups.music.child
@crescent.command(
    description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"
)
async def queue(ctx: crescent.Context) -> None:
    """List the current queue"""
    if not ctx.guild_id:
        return None

    voice = plugin.app.voice.connections.get(ctx.guild_id)

    if not voice:
        await ctx.respond(bot.Embed(
            title="–Ø –Ω–µ –≤ –≤–æ–π—Å–µ!",
            color=bot.Colors.ERROR
        ))
        return None

    assert isinstance(voice, LavalinkVoice)

    player = await voice.player.get_player()

    now_playing = "–ù–∏—á–µ–≥–æ"

    if player.track:
        time_s = int(player.state.position / 1000 % 60)
        time_m = int(player.state.position / 1000 / 60)
        time_true_s = int(player.state.position / 1000)
        time = f"{time_m:02}:{time_s:02}"

        assert player.track.user_data and isinstance(player.track.user_data, dict)

        if player.track.info.uri:
            now_playing = f"[`{player.track.info.author} - {player.track.info.title}`](<{player.track.info.uri}>): {time} (<@!{player.track.user_data['requester_id']}>)"
        else:
            now_playing = f"`{player.track.info.author} - {player.track.info.title}`: {time} (<@!{player.track.user_data['requester_id']}>)"

    queue = await voice.player.get_queue().get_queue()
    queue_text = ""

    for idx, i in enumerate(queue):
        if idx == 9:
            break

        assert i.track.user_data and isinstance(i.track.user_data, dict)

        if i.track.info.uri:
            queue_text += f"**{idx+1}** [`{i.track.info.author} - {i.track.info.title}`](<{i.track.info.uri}>) (<@!{i.track.user_data['requester_id']}>)\n"
        else:
            queue_text += f"**{idx+1}** `{i.track.info.author} - {i.track.info.title}` (<@!{i.track.user_data['requester_id']}>)\n"

    if not queue_text:
        queue_text = "–ü—É—Å—Ç–æ"

    await ctx.respond(embed=bot.Embed(
        description=f"### –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç\n{now_playing}\n### –û—á–µ—Ä–µ–¥—å\n{queue_text}",
        color=bot.Colors.WARNING
    ))


@plugin.include
@bot.groups.music.child
@crescent.command(
    name="remove",
    description="–£–±—Ä–∞—Ç—å —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
)
class Remove:
    index = crescent.option(int)

    async def callback(ctx: crescent.Context) -> None:
        if not ctx.guild_id:
            return None

        voice = plugin.app.voice.connections.get(ctx.guild_id)

        if not voice:
            await ctx.respond(bot.Embed(
                title="–Ø –Ω–µ –≤ –≤–æ–π—Å–µ!",
                color=bot.Colors.ERROR
            ))
            return None

        assert isinstance(voice, LavalinkVoice)

        queue = voice.player.get_queue()

        if ctx.options.index > await queue.get_count():
            await ctx.respond(bot.Embed(
                title="–ê –≥–¥–µ...",
                description="–Ø –Ω–µ –Ω–∞—à–ª–∞ —Ç–∞–∫–æ–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏!",
                color=bot.Colors.ERROR
            ))
            return None

        assert isinstance(ctx.options.index, int)
        track_in_queue = await queue.get_track(ctx.options.index - 1)
        assert track_in_queue
        track = track_in_queue.track

        if track.info.uri:
            await ctx.respond(embed=bot.Embed(
                title="–í–∫–ª—é—á–∏–ª–∞!",
                description=f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: [`{track.info.author} - {track.info.title}`](<{track.info.uri}>)",
                color=bot.Colors.SUCCESS
            ))
        else:
            await ctx.respond(embed=bot.Embed(
                title="–í–∫–ª—é—á–∏–ª–∞!",
                description=f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: `{track.info.author} - {track.info.title}`",
                color=bot.Colors.SUCCESS
            ))

        queue.remove(ctx.options.index - 1)


@plugin.include
@bot.groups.music.child
@crescent.command(
    description="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
)
async def clear(ctx: crescent.Context) -> None:
    if not ctx.guild_id:
        return None

    voice = plugin.app.voice.connections.get(ctx.guild_id)

    if not voice:
        await ctx.respond(bot.Embed(
            title="–Ø –Ω–µ –≤ –≤–æ–π—Å–µ!",
            color=bot.Colors.ERROR
        ))
        return None

    assert isinstance(voice, LavalinkVoice)

    queue = voice.player.get_queue()

    if not await queue.get_count():
        await ctx.respond(bot.Embed(
            title="–ê —á—Ç–æ —á–∏—Å—Ç–∏—Ç—å?",
            description="–û—á–µ—Ä–µ–¥—å –∏ —Ç–∞–∫ –ø—É—Å—Ç–∞!",
            color=bot.Colors.ERROR
        ))
        return None

    queue.clear()
    await ctx.respond(bot.Embed(
        title="–û–ø–∞ üßπ",
        description="–ü–æ—á–∏—Å—Ç–∏–ª–∞ –æ—á–µ—Ä–µ–¥—å!",
        color=bot.Colors.SUCCESS
    ))


@plugin.include
@bot.groups.music.child
@crescent.command(
    description="–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"
)
async def shuffle(ctx: crescent.Context) -> None:
    if not ctx.guild_id:
        return None

    voice = plugin.app.voice.connections.get(ctx.guild_id)

    if not voice:
        await ctx.respond(bot.Embed(
            title="–Ø –Ω–µ –≤ –≤–æ–π—Å–µ!",
            color=bot.Colors.ERROR
        ))
        return None

    assert isinstance(voice, LavalinkVoice)

    queue_ref = voice.player.get_queue()
    queue = await queue_ref.get_queue()

    random.shuffle(queue)

    queue_ref.replace(queue)

    await ctx.respond(bot.Embed(
        title="–ü–µ—Ä–µ–º–µ—à–∞–ª–∞!",
        color=bot.Colors.SUCCESS
    ))


@plugin.include
@bot.groups.music.child
@crescent.command(
    name='volume',
    description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏"
)
class Volume:
    volume = crescent.option(int, min_value=1, max_value=200)

    async def callback(self, ctx: crescent.Context) -> None:
        if not ctx.guild_id:
            return None

        voice = plugin.app.voice.connections.get(ctx.guild_id)

        if not voice:
            await ctx.respond(bot.Embed(
                title="–Ø –Ω–µ –≤ –≤–æ–π—Å–µ!",
                color=bot.Colors.ERROR
            ))
            return None

        assert isinstance(voice, LavalinkVoice)

        voice.player.set_volume(self.volume)
    
        await ctx.respond(bot.Embed(
            title=f"–¢–µ–ø–µ—Ä—å –∑–≤—É–∫ –Ω–∞ {self.volume}%!",
            color=bot.Colors.SUCCESS
        ))